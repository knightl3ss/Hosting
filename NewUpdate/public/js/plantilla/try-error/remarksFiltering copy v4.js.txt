$(document).ready(function() {
    // Store the current filter criteria
    var currentFilters = {
        remarks: '',
        office: '',
        service: '',
        status: ''
    };

    // Function to trigger the filter when the user changes any filter
    $('#remarksFilter, #officeFilter, #serviceFilter, #statusFilter').on('change', function() {
        var remarks = $('#remarksFilter').val();  // Get selected remarks value
        var office = $('#officeFilter').val();    // Get selected office value
        var service = $('#serviceFilter').val();  // Get selected service value
        var status = $('#statusFilter').val();    // Get selected status value

        // Update the current filter values
        currentFilters = { remarks, office, service, status };

        // Check if remarks filter is applied or any other filter is applied
        if (remarks || office || service || status) {
            // If remarks filter is applied, switch to the filtered table
            if (remarks) {
                $('#originalPersonnelTableContainer').hide();
                $('#filteredPersonnelTableContainer').show();
                filterPersonnelData(remarks, office, service, status);
            } else {
                // If no remarks filter, show the original table
                $('#originalPersonnelTableContainer').show();
                $('#filteredPersonnelTableContainer').hide();
            }
        } else {
            // If no filter is applied, show the original table and hide the filtered table
            $('#originalPersonnelTableContainer').show();
            $('#filteredPersonnelTableContainer').hide();
        }
    });

    function filterPersonnelData(remarks, office, service, status) {
        var filteredPersonnel = [];

        // Loop through all personnel data and filter based on all provided criteria
        $('.employee-data').each(function() {
            var personnel = $(this);
            var matchesRemarks = !remarks || personnel.data('remarks') === remarks;
            var matchesOffice = !office || personnel.data('office') === office;
            var matchesService = !service || personnel.data('years') === service;
            var matchesStatus = !status || personnel.data('status') === status;

            // Check if all the filter conditions are met
            if (matchesRemarks && matchesOffice && matchesService && matchesStatus) {
                var dob = personnel.find('td').eq(13).text();  // Get the date of birth
                var retirementDate = getRetirementDate(dob);  // Calculate the retirement date

                filteredPersonnel.push({
                    office: personnel.find('td').eq(0).text(),
                    position: personnel.find('td').eq(2).text(),
                    lastName: personnel.find('td').eq(10).text(),
                    firstName: personnel.find('td').eq(11).text(),
                    middleName: personnel.find('td').eq(12).text(),
                    dob: dob,
                    retirementDate: retirementDate  // Store dynamic retirement date
                });
            }
        });

        // Clear previous filtered data from the table body
        $('#filteredEmployeeTableBody').empty();

        if (filteredPersonnel.length > 0) {
            filteredPersonnel.forEach(function(personnel) {
                var row = `<tr>
                             <td>${personnel.office}</td>
                             <td>${personnel.position}</td>
                             <td>${personnel.lastName}</td>
                             <td>${personnel.firstName}</td>
                             <td>${personnel.middleName}</td>
                             <td>${getAge(personnel.dob)}</td>
                             <td>${personnel.retirementDate}</td>
                             </tr>`;
                $('#filteredEmployeeTableBody').append(row);
            });
        } else {
            $('#filteredEmployeeTableBody').append('<tr><td colspan="7" class="text-center">No personnel found.</td></tr>');
        }
    }

    // Helper function to calculate retirement date based on birthdate
    function getRetirementDate(dob) {
        var birthDate = new Date(dob);
        var retirementYear = birthDate.getFullYear() + 60;  // Add 60 years to the birth year

        // Set the retirement date to the person's 60th birthday (same day/month)
        var retirementDate = new Date(retirementYear, birthDate.getMonth(), birthDate.getDate());

        // Return formatted date as string (e.g., "June 30, 2050")
        return retirementDate.toLocaleDateString();  // You can customize this format
    }

    // Helper function to calculate age from birthdate
    function getAge(birthDate) {
        var birth = new Date(birthDate);
        var today = new Date();
        var age = today.getFullYear() - birth.getFullYear();
        var m = today.getMonth() - birth.getMonth();
        if (m < 0 || (m === 0 && today.getDate() < birth.getDate())) {
            age--;
        }
        return age;
    }
});
