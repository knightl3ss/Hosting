$(document).ready(function() {
    var currentFilters = { remarks: '', office: '', status: '' };

    // Trigger filtering when any filter is changed
    $('#remarksFilter, #officeFilter, #statusFilter').on('change', function() {
        var remarks = $('#remarksFilter').val();
        var office = $('#officeFilter').val();
        var status = $('#statusFilter').val();

        currentFilters = { remarks, office, status };

        // Check the filter conditions and show the appropriate table
        if ((remarks === '' && office === '' && status === '') ||  // No filter applied
            (office !== '' && remarks === '' && status === '') ||  // Office only filter applied
            (status !== '' && remarks === '' && office === '') ||  // Status only filter applied
            (office !== '' && status !== '' && remarks === '')) {  // Office and Status filter applied
            $('#originalPersonnelTableContainer').show();
            $('#filteredPersonnelTableContainer').hide();
        } else {
            $('#originalPersonnelTableContainer').hide();
            $('#filteredPersonnelTableContainer').show();
            filterPersonnelData(remarks, office, status);
        }
    });

    // Function to filter the personnel data based on the selected criteria
    function filterPersonnelData(remarks, office, status) {
        var filteredPersonnel = [];

        $('.employee-data').each(function() {
            var personnel = $(this);
            var matchesRemarks = !remarks || personnel.data('remarks') === remarks;
            var matchesOffice = !office || personnel.data('office') === office;
            var matchesStatus = !status || personnel.data('status') === status;

            // Check if the personnel match all filter conditions
            if (matchesRemarks && matchesOffice && matchesStatus) {
                var dob = personnel.find('td').eq(13).text();
                var retirementDate = getRetirementDate(dob);  // Calculate retirement date
                filteredPersonnel.push({
                    office: personnel.find('td').eq(0).text(),
                    position: personnel.find('td').eq(2).text(),
                    lastName: personnel.find('td').eq(10).text(),
                    firstName: personnel.find('td').eq(11).text(),
                    middleName: personnel.find('td').eq(12).text(),
                    dob: dob,
                    retirementDate: retirementDate,
                    remarks: personnel.find('td').eq(7).text()
                });
            }
        });

        // Clear previous filtered data and update with new results
        $('#filteredEmployeeTableBody').empty();
        if (filteredPersonnel.length > 0) {
            filteredPersonnel.forEach(function(personnel) {
                var row = `<tr>
                             <td>${personnel.office}</td>
                             <td>${personnel.position}</td>
                             <td>${personnel.lastName}</td>
                             <td>${personnel.firstName}</td>
                             <td>${personnel.middleName}</td>
                             <td>${getAge(personnel.dob)}</td>
                             <td>${personnel.retirementDate}</td>
                           </tr>`;
                $('#filteredEmployeeTableBody').append(row);
            });
        } else {
            $('#filteredEmployeeTableBody').append('<tr><td colspan="7" class="text-center">No personnel found.</td></tr>');
        }
    }

    // Helper function to calculate retirement date based on date of birth
    function getRetirementDate(dob) {
        var birthDate = new Date(dob);
        var retirementYear = birthDate.getFullYear() + 60;  // Assuming retirement at 60 years
        var retirementDate = new Date(retirementYear, birthDate.getMonth(), birthDate.getDate());
        return retirementDate.toLocaleDateString();  // Format the date in locale-specific format
    }

    // Helper function to calculate age from date of birth
    function getAge(birthDate) {
        var birth = new Date(birthDate);
        var today = new Date();
        var age = today.getFullYear() - birth.getFullYear();
        var m = today.getMonth() - birth.getMonth();
        if (m < 0 || (m === 0 && today.getDate() < birth.getDate())) {
            age--;
        }
        return age;
    }
});
